/*
 *
 * Copyright 2017 Seven Bridges Genomics Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 *  CResultLog.h
 *  VariantBenchmarkingTools
 *
 *  Created by Berke Cagkan Toptas on 12/29/16.
 *
 */

#ifndef _C_RESULT_LOG_H_
#define _C_RESULT_LOG_H_

#include <string>
#include "Constants.h"
#include <vector>
#include "CSyncPoint.h"
#include <fstream>

namespace duocomparison
{
    
/**
 * @brief Stores statistic data (TP/FP/FN counts) per chromosome
 */
struct SLogEntry
{
    std::string m_chrName;
    int m_nBaseId;
    bool m_bIsNull = true;
    int m_nTpCalled;
    int m_nTpBase;
    int m_nHalfTpCalled;
    int m_nHalfTpBase;
    int m_nFp;
    int m_nFn;
};

/**
 * @brief Stores/Processes statistic data generated by CVcfAnalyzer tool
 */
class CResultLog
{
    
public:
    
    ///Sets the path of log file
    void SetLogPath(const std::string& a_rLogPath);
    
    ///Records the result for given chromosome
    void LogStatistic(const std::string& a_chromosomeName,
                      int a_nBaseId,
                      int a_nTpCalled,
                      int a_nTpBaseline,
                      int a_nHalfTPCalled,
                      int a_nHalfTPBaseline,
                      int a_nFalsePositive,
                      int a_nFalseNegative);
    
    /**
     * @brief Write the results in log.txt file
     * @param a_nMode 0 - SPLIT (genotype match) 1 - SPLIT (allele match) s 2 - GA4GH
     */
    void WriteStatistics(int a_nMode);
    
    ///Open SyncPoint File
    void OpenSyncPointFile(const std::string& a_rFilePath);
    ///Close SyncPoint File
    void CloseSyncPointFile();
    
    ///Write SyncPointList to a file
    void WriteSyncPointList(const std::string& a_rChrName, const std::vector<core::CSyncPoint>& a_rSyncPointList);
        
private:
    
    //Log entry array for ga4gh output [THE STANTARD OUTPUT]
    std::vector<SLogEntry> m_aResultEntries;
        
    std::string m_aLogPath;
    
    std::ofstream m_syncPointFile;
    
};
    
}



#endif // _C_RESULT_LOG_H_
